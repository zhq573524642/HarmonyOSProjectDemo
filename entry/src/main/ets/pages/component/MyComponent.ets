import promptAction from '@ohos.promptAction'



@Component
export struct CommonButton {
  private text: string = '点击'

  build() {
    Row() {
      Button() {
        Text(this.text)
          .fontColor(Color.Black)
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .textAlign(TextAlign.Center)
          .padding(8)
      }
      .width('100%')
      .height(40)
      .backgroundColor(Color.Orange)
    }.margin(8)

  }
}

@Component
export struct CommonButton1 {
  @Link private text: string

  build() {
    Row() {
      Button() {
        Text(this.text)
          .fontColor(Color.Black)
          .fontSize(16)
          .fontWeight(FontWeight.Bold)
          .textAlign(TextAlign.Center)
          .padding(8)
      }
      .width('100%')
      .height(40)
      .backgroundColor(Color.Orange)
    }.margin(8)

  }
}

@Component
export struct Square {
  /**
   * In low-code mode, do not add anything to the build function, as it will be
   * overwritten by the content generated by the .visual file in the build phase.
   */
  text: string = ''
  color: Color = Color.White
  w: number = 0
  h: number = 0

  build() {
    Text(this.text)
      .fontColor(Color.Black)
      .fontSize(16)
      .fontWeight(FontWeight.Bold)
      .padding(10)
      .textAlign(TextAlign.Center)
      .backgroundColor(this.color)
      .width(this.w)
      .height(this.h)
  }
}

@Component
export struct CommonTitle {
  private title: string = ''

  build() {
    Row() {
      Text(this.title)
        .fontColor(Color.Black)
        .fontSize(18)
        .fontWeight(FontWeight.Bold)
    }.padding(15)
  }
}

@Component
export struct StateTestView {
  @State stateParam: string = 'state_param'
  @Link linkParam: string
  @Prop propParam: string

  build() {
    Column() {
      Text('stateParam：' + this.stateParam).fontSize(16)
      Text('linkParam：' + this.linkParam).fontSize(16)
      Text('propParam：' + this.propParam).fontSize(16)
      Button('点击')
        .margin(5)
        .onClick(() => {
          this.stateParam = 'stateParam_自定义子组件内部点击'
          this.linkParam = 'linkParam_自定义子组件内部点击'
          this.propParam = 'propParam_自定义子组件内部点击'
        })
    }.padding(5)
    .margin(10)
    .width('100%')
  }
}


@Component
export struct RadioList {
  title?: string = '分类'
  checkedIndex: number = 0
  radioGroup: string = 'group_default'
  data: Array<string> = []
  onCheckChange?: (position: number, isChecked: boolean) => void

  build() {
    Column() {
      Text(this.title).fontSize(13)
      List() {
        ForEach(this.data, (item: string, position: number) => {
          ListItem() {
            Row() {
              Radio({ value: item, group: this.radioGroup })
                .checked(this.checkedIndex == position)
                .width(20)
                .height(20)
                .onChange((isChecked: boolean) => {
                  if (this.onCheckChange) {
                    this.onCheckChange(position, isChecked)
                  }
                })
              Text(item).fontSize(12).margin({ left: 3 })
            }.alignItems(VerticalAlign.Center)
            .justifyContent(FlexAlign.Start)
          }
        }, (item: string) => item)
      }.listDirection(Axis.Horizontal)
      .margin({ top: 5 })
      .alignListItem(ListItemAlign.Start)
    }.width('100%')
    .alignItems(HorizontalAlign.Start)
    .margin(8)
  }
}

//全局自定义构建函数
@Builder
export function MyGlobalBuilderFunction(click: () => void) {
  Text('调用全局的自定义构建函数')
    .fontSize(15)
    .margin(10)
    .fontColor(Color.Red)
    .fontWeight(FontWeight.Bold)
    .onClick(() => {
      click
    })
}

@Builder
export function MyGlobalBuilderFunctionWithParams(text: string, textSize: number, textColor: Color) {
  Text(`${text}`).fontSize(textSize).margin(10).fontColor(textColor).fontWeight(FontWeight.Bold)
}

@Builder
export function OneGlobalBuilder(value: string, fontSize: number, fontColor: Color) {
  Text(value).fontSize(fontSize).width('100%').textAlign(TextAlign.Center).fontColor(fontColor)
}

@Builder
export function TwoGlobalBuilder(value: string, fontSize: number, fontColor: Color) {
  Text(value).fontSize(fontSize).width('100%').textAlign(TextAlign.Center).fontColor(fontColor)
}

